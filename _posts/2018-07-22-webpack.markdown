---
layout:     post
title:      "深入浅出webpack"
subtitle:   ""
date:       2019-05-20 12:00:00
author:     "zack"
header-img: "img/post-bg-js-version.jpg"
catalog: true
tags:
    - Javascript
---

### 前言

webpack是一个Javascript应用程序的静态模块打包器，接下来我们将通过理解以下四个核心概念:
+ entry（入口）
+ output（输出）
+ loader（转换器）
+ plugins（插件）
一起来使用webpack定制前端开发环境

### 安装和使用

##### 安装
` npm install webpack webpack-cli -g  ` 
##### 使用
1. 创建一个项目在`src`目录下新建`index.html`,`index.css`,`index.js`以及`assets`文件夹等一个基础的项目结构
2. 在项目根目录下使用`npm init` 创建`package.json`文件
3. `npm install webpack -D`   `npm install webpack-cli -D`  分别安装webpack和webpack-cli
4. 在package.json中，添加一个npm scripts
```
    "scripts": {
        "build": "webpack --mode production"
    },
    "devDependencies": {
        "webpack": "^4.37.0",
        "webpack-cli": "^3.3.6",
    }
```
此时`npm run build`就会发现新增了一个`dist`目录，里面存放着webpack构建的main.js文件
5. 最后还需要一个`webpack.config.js`配置文件，配置实际项目中需要的功能,一起来配置吧~

### 基础用法

##### entry
多个代码模块中会有一个起始的`.js`文件，这便是webpack构建的入口，常见项目中可能入口有一个也可能有多个。
+ 单个入口
```
    module.exports = {
        entry: {
            main: './src/index.js'  
        }
    }
```
+ 多个入口
```
    module.exports = {
        entry: {
            main: [
                './src/foo.js',
                './src/bar.js'
            ]
        }
    }
```

##### resolve
+ resolve.alias
模糊匹配：如import 'utils/query.js' 等同于 'import [项目绝对路径]/src/utils/query.js'
```
    alias: {
        utils: path.resolve(__dirname, 'src/utils')
    }
```
精确匹配：给定对象的键后末尾添加$,如匹配 import 'utils'
```
    alias: {
        utils$: path.resolve(__dirname, 'src/utils')
    }
```
+ resolve.extensions
此配置是一个数组，数组的顺序代表匹配后缀的优先级
```
    extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx', '.css']
```
如在src/utils下面有一个common.js文件时，就可以这样引用 import * as common from 'utils/common'
+ resolve.modules
告诉webpack解析模块时应该搜索的目录，绝对路径和相对路径都能使用
相对路径将类似于 Node 查找 'node_modules' 的方式进行查找
使用绝对路径，将只在给定目录中搜索
```
    resolve: {
        modules: ['node_modules']
    }
```
可以添加目录到模块搜索目录，此目录优先级高于node_modules,这样配置可以在某种程度上简化模块的查找，提升构建速度
```
    resolve: {
        modules:[path.resolve(_dirname, 'src'), 'node_modules']
    }
```
+ resolve.mainFiles
默认解析使用index.js这个文件，也可配置
```
    resolve: {
        mainFiles: ['index']  // 可以添加其他默认使用的文件名
    }
```
+ resolve.mainFields

？
更多关于`resolve`，请移步[官网](https://webpack.docschina.org/configuration/resolve/ "resolve")

##### loader
loader就是webpack提供的一种处理多种格式文件格式的机制，可以理解是一个转换器，负责把某种文件格式的内容转换为webpack可以支持打包的模块。
默认webpack会把所有的依赖打包成js文件，当我们需要处理不同类型的文件时可以在`module.rules`配置
###### 条件

+ `{test: Condition}` 匹配特定条件
+ `{include: Condition }` 匹配特定条件
+ `{exclude: Condition }` 排除特定条件
+ `{and: Condition }` 必须匹配数组中的所有条件
+ `{or: Condition }` 匹配数组中任何一个条件
+ `{not: Condition }` 必须排除这个条件

```
    rules: [
        {
            test: /\.jsx?/,  //正则,
            include: [
                path.resolve(_dirname, 'src') // 字符串，注意是绝对路径
            ],
            not: [
                (value) => {/*...*/ return true;} // 函数，高度自定义
            ]
        }
    ]
```
###### 模块类型
不同的模块类型类似于配置了不同的`loader`，webpack会针对性的进行处理，目前有5种模块类型：

1. `javascript/auto`    支持现有各种JS代码模块类型————CommonJS、AMD、ESM
2. `javascript/esm`     ECMAScript modules，例如CommonJS和AMD等不支持，是.mjs文件的默认类型
3. `javascript/dynamic`     CommonJS和AMD，排除ESM
4. `javascript/json`    JSON格式数据，是.json的文件默认类型
5. `webassembly/experimental`   WebAssembly modules 是.wasm文件的默认类型

举例，如所有JS代码文件都设置为强制使用ESM类型：
```
    {
        test: /\.js/,
        include: [
            path.resolve(_dirname, 'src),
        ],
        type: 'javascript/esm'
    }
```
###### 使用loader
module.rules 的匹配规则主要是用于匹配loader，使用`use`字段：
```
    rules: [
        {
            test: /\.less/,
            use: [
                'style-loader',
                {
                    loader: 'css-loader',
                    options: {
                        importLoaders: 1   //数字1代表当前loader之后的一个loader
                    }
                },
                {
                    loader: 'less-loader',
                    options: {
                        noIeCompat: true
                    }
                }
            ]
        }
    ]
```
一个模块文件可以经过多个loader的转换处理，在同一个rule中执行顺序是从最后配置的loader开始往前。
上述从后往前的顺序是在同一个rule中进行，那如果多个rule匹配同一个模块文件，此时的loader的应用顺序又是怎样的呢？
```
    rules: [
        {
            enforce: 'pre',
            test: /\.js$/,
            exclude: /node_modules/,
            loader: 'eslint-loader'
        },
        {
            test: /\.js$/,
            exclude: /node_modules/,
            loader: 'babel-loader'
        }
    ]
```
webpack提供了`enforce`字段来配置当前rule的loader类型，倘若没配置就是普通类型，还可配置`pre`或`post`,分别对应前置类型和后置类型的loader

+ tips：还有一种行内loader，即如`const json=require('json-loader!./file.json')` ，不建议在开发中使用

总结下来，loader按照**前置**->**行内**->**普通**->**后置**的顺序执行

###### module.noParse
用于配置哪些模块文件的内容不需要解析，忽略的文件不应该含有import，require，define的调用，或其他导入机制，可以提高整体的构建速度
```
    module.exports = {
        module: {
            noParse: /jquery|lodash/
        }
    }
```

##### plugin
用于处理更多其他的一些构建任务，通过添加我们需要的plugin，可以满足更多构建任务中的特殊需求。
例如，要使用压缩JS代码的`uglifyjs-webpack-plugin`插件，只需在配置中通过`plugins`字段添加新的plugin即可：
```
    const UglifyPlugin = require('uglifyjs-webpack-plugin')
    
    module.exports = {
        plugins: [
            new UglifyPlugin()
        ]
    }
```

###### DefinePlugin
用途：允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用<br>
用法：
>  每个传进 DefinePlugin 的键值都是一个标志符或者多个用 . 连接起来的标志符。<br>
如果这个值是一个字符串，它会被当作一个代码片段来使用。 <br>
如果这个值不是字符串，它会被转化为字符串(包括函数)。<br>
如果这个值是一个对象，它所有的 key 会被同样的方式定义。<br>
如果在一个 key 前面加了 typeof,它会被定义为 typeof 调用。

```
    plugins: [
      new webpack.DefinePlugin({
        'process.host': getDeployConfigDefine(),
        VERSION: 'v1'
      })
    ]
    // ....
    function getDeployConfigDefine() {
        let config = {}
            Object.keys(env).forEach(function(key) {
                config[key] = `'${env[key].api}'`
            })
        return config
    }
```
```
    console.log(VERSION)

```
###### copy-webpack-plugin
用途：将不经过webpack处理，但我们希望也能出现在build目录下的文件，使用CopyWebpackPlugin处理<br>
用法：
```
    const CopyWebpackPlugin = require('copy-webpack-plugin')
    const resolve = (file) => path.resolve(__dirname, file)

    plugins: [
        new CopyWebpackPlugin([
            {
                from:  resolve('./static'),     // 配置来源
                to:  to: resolve('./dist/static'),      // 配置目标路径
            }   
        ])
    ]
```
更多配置请参考[copy-webpack-plugin](https://github.com/webpack-contrib/copy-webpack-plugin "copy-webpack-plugin")

###### extract-text-webpack-plugin
